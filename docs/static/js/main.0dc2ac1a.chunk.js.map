{"version":3,"sources":["Canvas.js","AppReducer.js","LeftPanel.js","RightPanel.js","App.js","serviceWorker.js","index.js"],"names":["scene","camera","renderer","controls","geometry","reducer","state","type","payload","initial","cubes","id","position","x","y","z","color","scale","_","mapValues","cube","active","hovered","omit","hover","cubeMeshes","raycaster","Raycaster","mouse","Vector2","currentHoverId","prevState","memo","setActive","setHover","setCamera","animate","requestAnimationFrame","setFromCamera","intersects","intersectObjects","children","length","object","name","updateHover","render","updateCamera","setRef","useCallback","node","Scene","PerspectiveCamera","window","innerWidth","innerHeight","WebGLRenderer","canvas","setSize","OrbitControls","domElement","addEventListener","BoxGeometry","useLayoutEffect","updateSize","aspect","updateProjectionMatrix","onMouseMove","event","clientX","clientY","onClick","removeEventListener","useEffect","prevActive","prevHover","prevCubes","prevInitial","difference","keys","forEach","cubeMesh","remove","material","dispose","added","forOwn","MeshBasicMaterial","Mesh","set","add","intersection","reset","ref","width","height","LeftPanel","numberOfCubes","createCube","resetCamera","resetScale","className","activeId","changeColor","scaleCube","confirmDelete","htmlFor","value","onChange","target","min","max","step","Number","confirm","lastId","App","useReducer","dispatch","size","activeCube","Math","random","i","floor","getRandomColor","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0dc2ac1a.chunk.js","sourcesContent":["import React, { useEffect, useCallback, memo, useLayoutEffect } from 'react';\nimport { Scene, PerspectiveCamera, WebGLRenderer, Raycaster, Vector2, BoxGeometry, MeshBasicMaterial, Mesh } from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport _ from 'lodash';\n\nlet scene;\nlet camera;\nlet renderer;\nlet controls;\nconst cubeMeshes = {};\nconst raycaster = new Raycaster();\nconst mouse = new Vector2(0, 0);\nlet currentHoverId = '';\n\nlet geometry;\n\nconst prevState = {};\n\n \nfunction Canvas({ active, hover, cubes, camera: { initial }, setActive, setHover, setCamera }) {\n\n  const updateHover = () => {\n    raycaster.setFromCamera( mouse, camera );\n    const intersects = raycaster.intersectObjects( scene.children );\n    if (intersects.length) {\n      if (currentHoverId !== intersects[0].object.name) {\n        currentHoverId = intersects[0].object.name;\n        setHover(currentHoverId);\n      }\n    } else {\n      if (currentHoverId) {\n        currentHoverId = '';\n        setHover(null);\n      }\n    }\n  };\n\n  const animate = () => {\n    requestAnimationFrame(animate);\n    updateHover();\n    renderer.render(scene, camera);\n  };\n\n  const updateCamera = () => {\n    if (initial) setCamera(false);\n  };\n  const setRef= useCallback(node => {\n    scene = new Scene();\n    camera = new PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    renderer = new WebGLRenderer({ canvas: node });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    camera.position.z = 5;\n    controls = new OrbitControls(camera, renderer.domElement);\n    controls.addEventListener('change', updateCamera);\n    geometry = new BoxGeometry();\n    animate();\n  }, []);\n\n  useLayoutEffect(() => {\n    function updateSize() {\n      camera.aspect = window.innerWidth / window.innerHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize( window.innerWidth, window.innerHeight );\n    }\n    function onMouseMove( event ) {\n      mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;\n      mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;\n    }\n    function onClick() {\n      if (currentHoverId) setActive(currentHoverId);\n    } \n    window.addEventListener('resize', updateSize);\n    window.addEventListener('mousemove', onMouseMove);\n    window.addEventListener('click', onClick);\n    return () => {\n      window.removeEventListener('resize', updateSize);\n      window.removeEventListener('mousemove', onMouseMove);\n      window.removeEventListener('click', onClick);\n    };\n  }, []);\n\n\n  useEffect(() => {\n    const { active: prevActive, hover: prevHover, cubes: prevCubes, initial: prevInitial } = prevState;\n    if (prevCubes !== cubes) {\n      const deleted = _.difference(_.keys(prevCubes), _.keys(cubes));\n      deleted.forEach(id => {\n        const cubeMesh = cubeMeshes[id];\n        if (!cubeMesh) return;\n        scene.remove(cubeMesh);\n        cubeMesh.material.dispose();\n      });\n      const added = _.omit(cubes, _.keys(prevCubes));\n      _.forOwn(added, ({ color, position: { x, y, z }}, id) => {\n        const material = new MeshBasicMaterial({ color });\n        const cubeMesh = new Mesh(geometry, material);\n        cubeMesh.position.set(x, y, z);\n        cubeMesh.name = id;\n        cubeMeshes[id] = cubeMesh;\n        scene.add(cubeMesh);\n      });\n      const changed = _.intersection(_.keys(prevCubes), _.keys(cubes));\n      changed.forEach(id => {\n        if (prevCubes[id] === cubes[id]) return;\n        const cubeMesh = cubeMeshes[id];\n        if (!cubeMesh) return;\n        if (prevCubes[id].color !== cubes[id].color && id !== active) {\n          cubeMesh.material.color.set(cubes[id].color);\n        }\n        if (prevCubes[id].scale !== cubes[id].scale) {\n          cubeMesh.scale.set(cubes[id].scale, cubes[id].scale, cubes[id].scale);\n        }\n      });\n    }\n    if (prevActive !== active) {\n      if (prevActive) {\n        const cubeMesh = cubeMeshes[prevActive];\n        const cube = cubes[prevActive];\n        if (cubeMesh && cube) {\n          cubeMesh.material.color.set(cube.color);\n        }\n      }\n      if (active) {\n        const cubeMesh = cubeMeshes[active];\n        const cube = cubes[active];\n        if (cubeMesh && cube) {\n          cubeMesh.material.color.set('#0000FF');\n        }\n      }\n    }\n    if (prevHover !== hover) {\n      if (prevHover && prevHover !== active) {\n        const cubeMesh = cubeMeshes[prevHover];\n        const cube = cubes[prevHover];\n        if (cubeMesh && cube) {\n          cubeMesh.material.color.set(cube.color);\n        }\n      }\n      if (hover && hover !== active) {\n        const cubeMesh = cubeMeshes[hover];\n        const cube = cubes[hover];\n        if (cubeMesh && cube) {\n          cubeMesh.material.color.set('#00FF00');\n        }\n      }\n    }\n    if (!prevInitial && initial) {\n      controls.reset();\n    }\n    prevState.active = active;\n    prevState.hover = hover;\n    prevState.cubes = cubes;\n    prevState.initial = initial;\n  }, [active, hover, cubes, initial]);\n\n\n  return (\n    <canvas ref={setRef} width=\"100%\" height=\"100%\"></canvas>\n      \n  );\n}\n\nexport default memo(Canvas);\n","import _ from 'lodash';\n\nconst reducer = (state, { type, payload }) => {\n  switch (type) {\n    case 'setCamera':\n      return {\n        ...state,\n        camera: { initial: payload.initial }\n      };\n    case 'createCube':\n      return {\n        ...state,\n        cubes: {\n          ...state.cubes,\n          [payload.id]: {\n            position: { x: payload.x, y: payload.y, z: payload.z },\n            color: payload.color,\n            scale: 1\n          }\n        }\n      };\n    case 'scaleCube':\n      return {\n        ...state,\n        cubes: {\n          ...state.cubes,\n          [payload.id]: {\n            ...state.cubes[payload.id],\n            scale: payload.scale\n          }\n        }\n      };\n    case 'resetScale': \n      return {\n        ...state,\n        cubes: _.mapValues(state.cubes, cube => ({ ...cube, scale: 1 }))\n      };\n    case 'changeColor':\n      return {\n        ...state,\n        cubes: {\n          ...state.cubes,\n          [payload.id]: {\n            ...state.cubes[payload.id],\n            color: payload.color\n          }\n        }\n      };\n    case 'delete':\n      return {\n        ...state,\n        active: state.active === payload.id ? null : state.active,\n        hovered: state.hovered === payload.id ? null : state.hovered,\n        cubes: _.omit(state.cubes, [ payload.id ]),\n      };\n    case 'setHover':\n      return {\n        ...state,\n        hover: payload.id\n      };\n    case 'setActive':\n      return {\n        ...state,\n        active: payload.id\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","import React from 'react';\nimport './LeftPanel.css';\n\nconst LeftPanel = ({ numberOfCubes, createCube, resetCamera, resetScale }) => (\n  <div className=\"LeftPanel\">\n    <h2>Cubes: {numberOfCubes}</h2>\n    <button onClick={createCube}>CREATE</button>\n    <button onClick={resetCamera}>RESET CAMERA</button>\n    <button onClick={resetScale}>RESET SCALE</button>\n  </div>\n);\n\nexport default LeftPanel;\n\n","import React from 'react';\nimport './RightPanel.css';\n\nconst LeftPanel = ({ activeId, color, scale, changeColor, scaleCube, confirmDelete }) => {\n  const handleColorChange = ({ target: { value } = {} }) => {\n    if (value) {\n      changeColor(activeId, value);\n    }\n  }\n\n  const handleScaleChange = ({ target: { value } = {} }) => {\n    if (value) {\n      scaleCube(activeId, Number(value));\n    }\n  }\n\n  const handleDelete = () => {\n    if (!window.confirm(`Delete Cube ${activeId}?`)) return;\n    confirmDelete(activeId);\n  }\n  return (\n    <div className=\"RightPanel\">\n      <h2>ACTIVE: {activeId || '-'}</h2>\n      { activeId && (\n        <>\n        <div>\n          <label htmlFor=\"colorPicker\">COLOR</label><br />\n          <input id=\"colorPicker\" type=\"color\" value={color} onChange={handleColorChange} />\n        </div>\n        <div>\n          <label htmlFor=\"scaleSlider\">SCALE</label><br />\n          <input id=\"scaleSlider\" type=\"range\" min=\"0.1\" max=\"5\" step=\"0.2\" value={scale} onChange={handleScaleChange} />\n        </div>\n        <button onClick={handleDelete}>DELETE</button>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default LeftPanel;\n\n","import React, { useReducer } from 'react';\nimport _ from 'lodash';\nimport reducer from './AppReducer';\nimport Canvas from './Canvas';\nimport LeftPanel from './LeftPanel';\nimport RightPanel from './RightPanel';\n\nlet lastId = 0;\n\nfunction getRandomColor() {\n  var letters = '0123456789ABCDEF';\n  var color = '#';\n  for (var i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\nfunction App() {\n\n  const [state, dispatch] = useReducer(reducer, {\n    active: null,\n    hover: null,\n    cubes: {},\n    camera: { initial: true }\n  });\n\n  const setCamera = (initial) => dispatch({ type: 'setCamera', payload: { initial }});\n  const resetCamera = () => dispatch({ type: 'setCamera', payload: { initial: true }});\n  const createCube = () => {\n    const id = `${++lastId}`;\n    const x = (Math.random() - 0.5) * 12;\n    const y = (Math.random() - 0.5) * 12;\n    const z = (Math.random() - 1) * 12;\n    const color = getRandomColor();\n    dispatch({ type: 'createCube', payload: { id, x, y, z, color }});\n  };\n  const scaleCube = (id, scale) => dispatch({ type: 'scaleCube', payload: { id, scale }});\n  const resetScale = () => dispatch({ type: 'resetScale' });\n  const changeColor = (id, color) => dispatch({ type: 'changeColor', payload: { id, color }});\n  const confirmDelete = (id) => dispatch({ type: 'delete', payload: { id }});\n  const setHover = (id) => dispatch({ type: 'setHover', payload: { id }});\n  const setActive = (id) => dispatch({ type: 'setActive', payload: { id }});\n\n  const { cubes, active } = state;\n  const numberOfCubes = _.size(cubes);\n  const activeCube = cubes[active];\n\n  return (\n    <>\n      <Canvas {...state} setActive={setActive} setHover={setHover} setCamera={setCamera} />\n      <LeftPanel numberOfCubes={numberOfCubes} createCube={createCube} resetCamera={resetCamera} resetScale={resetScale} />\n      <RightPanel activeId={active} color={activeCube && activeCube.color} scale={activeCube && activeCube.scale} changeColor={changeColor} scaleCube={scaleCube} confirmDelete={confirmDelete} />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}